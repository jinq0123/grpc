// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: helloworld.proto
#ifndef GRPC_CB_helloworld_2eproto__INCLUDED
#define GRPC_CB_helloworld_2eproto__INCLUDED

#include "helloworld.pb.h"

#include <grpc_cb/channel_ptr.h>
#include <grpc_cb/service_stub.h>

namespace grpc_cb {
class RpcService;
}  // namespace grpc_cb

namespace helloworld {

namespace Greeter {
class Stub : public ::grpc_cb::ServiceStub {
 public:
  Stub(const ::grpc_cb::ChannelPtr& channel);
  ::grpc_cb::Status SayHello(::grpc_cb::ClientContext* context, const ::helloworld::HelloRequest& request, ::helloworld::HelloReply* response) GRPC_OVERRIDE;
  std::unique_ptr< ::grpc_cb::ClientAsyncResponseReader< ::helloworld::HelloReply>> AsyncSayHello(::grpc_cb::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc_cb::CompletionQueue* cq) {
    return std::unique_ptr< ::grpc_cb::ClientAsyncResponseReader< ::helloworld::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
  }

 private:
  ::grpc_cb::ClientAsyncResponseReader< ::helloworld::HelloReply>* AsyncSayHelloRaw(::grpc_cb::ClientContext* context, const ::helloworld::HelloRequest& request, ::grpc_cb::CompletionQueue* cq) GRPC_OVERRIDE;
  const ::grpc_cb::RpcMethod rpcmethod_SayHello_;
};

std::unique_ptr<Stub> NewStub(const ::grpc_cb::ChannelPtr& channel);

class Service : public ::grpc_cb::SynchronousService {
 public:
  Service();
  virtual ~Service();
  virtual ::grpc_cb::Status SayHello(::grpc_cb::ServerContext* context, const ::helloworld::HelloRequest* request, ::helloworld::HelloReply* response);
  ::grpc_cb::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
 private:
  std::unique_ptr< ::grpc_cb::RpcService> service_;
};
class AsyncService GRPC_FINAL : public ::grpc_cb::AsynchronousService {
 public:
  explicit AsyncService();
  ~AsyncService() {};
  void RequestSayHello(::grpc_cb::ServerContext* context, ::helloworld::HelloRequest* request, ::grpc_cb::ServerAsyncResponseWriter< ::helloworld::HelloReply>* response, ::grpc_cb::CompletionQueue* new_call_cq, ::grpc_cb::ServerCompletionQueue* notification_cq, void *tag);
};
}  // namespace Greeter

}  // namespace helloworld

#endif  // GRPC_CB_helloworld_2eproto__INCLUDED
