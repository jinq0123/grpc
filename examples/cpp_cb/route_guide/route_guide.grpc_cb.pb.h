// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#ifndef GRPC_CB_route_5fguide_2eproto__INCLUDED
#define GRPC_CB_route_5fguide_2eproto__INCLUDED

#include <grpc_cb/channel_sptr.h>
#include <grpc_cb/error_callback.h>        // for ErrorCallback
#include <grpc_cb/server_async_replier.h>  // for ServerAsyncReplier<>
#include <grpc_cb/service.h>
#include <grpc_cb/service_stub.h>
#include <grpc_cb/support/status.h>

#include "route_guide.pb.h"

namespace routeguide {

namespace RouteGuide {

const ::google::protobuf::ServiceDescriptor& GetServiceDescriptor();

class Stub : public ::grpc_cb::ServiceStub {
 public:
  Stub(const ::grpc_cb::ChannelSptr& channel);

  inline ::grpc_cb::Status GetFeature(
       const ::routeguide::Point& request) {
    ::routeguide::Feature response;
    return GetFeature(request, &response);  // Ignore response.
  }
  ::grpc_cb::Status GetFeature(
      const ::routeguide::Point& request,
      ::routeguide::Feature* response);

  using GetFeatureCallback =
      std::function<void (const ::routeguide::Feature& response)>;
  inline void AsyncGetFeature(
      const ::routeguide::Point& request) {
    return AsyncGetFeature(request, &IgnoreResponse<::routeguide::Feature>);
  }
  inline void AsyncGetFeature(
      const ::routeguide::Point& request,
      const GetFeatureCallback& cb) {
    return AsyncGetFeature(request, cb, error_callback_);  // Use default error callback.
  }
  void AsyncGetFeature(
      const ::routeguide::Point& request,
      const GetFeatureCallback& cb,
      const ::grpc_cb::ErrorCallback& err_cb);

  std::unique_ptr< ::grpc_cb::ClientReader< ::routeguide::Feature>> ListFeatures(::grpc_cb::ClientContext* context, const ::routeguide::Rectangle& request) {
    return std::unique_ptr< ::grpc_cb::ClientReader< ::routeguide::Feature>>(ListFeaturesRaw(context, request));
  }
  std::unique_ptr< ::grpc_cb::ClientAsyncReader< ::routeguide::Feature>> AsyncListFeatures(::grpc_cb::ClientContext* context, const ::routeguide::Rectangle& request, ::grpc_cb::CompletionQueue* cq, void* tag) {
    return std::unique_ptr< ::grpc_cb::ClientAsyncReader< ::routeguide::Feature>>(AsyncListFeaturesRaw(context, request, cq, tag));
  }

  std::unique_ptr< ::grpc_cb::ClientWriter< ::routeguide::Point>> RecordRoute(::grpc_cb::ClientContext* context, ::routeguide::RouteSummary* response) {
    return std::unique_ptr< ::grpc_cb::ClientWriter< ::routeguide::Point>>(RecordRouteRaw(context, response));
  }
  std::unique_ptr< ::grpc_cb::ClientAsyncWriter< ::routeguide::Point>> AsyncRecordRoute(::grpc_cb::ClientContext* context, ::routeguide::RouteSummary* response, ::grpc_cb::CompletionQueue* cq, void* tag) {
    return std::unique_ptr< ::grpc_cb::ClientAsyncWriter< ::routeguide::Point>>(AsyncRecordRouteRaw(context, response, cq, tag));
  }

  std::unique_ptr< ::grpc_cb::ClientReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>> RouteChat(::grpc_cb::ClientContext* context) {
    return std::unique_ptr< ::grpc_cb::ClientReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>>(RouteChatRaw(context));
  }
  std::unique_ptr<  ::grpc_cb::ClientAsyncReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>> AsyncRouteChat(::grpc_cb::ClientContext* context, ::grpc_cb::CompletionQueue* cq, void* tag) {
    return std::unique_ptr< ::grpc_cb::ClientAsyncReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>>(AsyncRouteChatRaw(context, cq, tag));
  }

 private:
  ::grpc_cb::ClientReader< ::routeguide::Feature>* ListFeaturesRaw(::grpc_cb::ClientContext* context, const ::routeguide::Rectangle& request) GRPC_OVERRIDE;
  ::grpc_cb::ClientAsyncReader< ::routeguide::Feature>* AsyncListFeaturesRaw(::grpc_cb::ClientContext* context, const ::routeguide::Rectangle& request, ::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
  ::grpc_cb::ClientWriter< ::routeguide::Point>* RecordRouteRaw(::grpc_cb::ClientContext* context, ::routeguide::RouteSummary* response) GRPC_OVERRIDE;
  ::grpc_cb::ClientAsyncWriter< ::routeguide::Point>* AsyncRecordRouteRaw(::grpc_cb::ClientContext* context, ::routeguide::RouteSummary* response, ::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
  ::grpc_cb::ClientReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>* RouteChatRaw(::grpc_cb::ClientContext* context) GRPC_OVERRIDE;
  ::grpc_cb::ClientAsyncReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>* AsyncRouteChatRaw(::grpc_cb::ClientContext* context, ::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
  // const ::grpc_cb::RpcMethod rpcmethod_GetFeature_;
  // const ::grpc_cb::RpcMethod rpcmethod_ListFeatures_;
  // const ::grpc_cb::RpcMethod rpcmethod_RecordRoute_;
  // const ::grpc_cb::RpcMethod rpcmethod_RouteChat_;
};

std::unique_ptr<Stub> NewStub(const ::grpc_cb::ChannelSptr& channel);

class Service : public ::grpc_cb::Service {
 public:
  Service();
  virtual ~Service();

  virtual const std::string& GetMethodName(size_t i) const GRPC_OVERRIDE;
  virtual void CallMethod(
      size_t method_index, grpc_byte_buffer& request_buffer,
      const ::grpc_cb::ServerAsyncMsgReplier& msg_replier) GRPC_OVERRIDE;

 private:
  void GetFeature(
      grpc_byte_buffer& request_buffer,
      const ::grpc_cb::ServerAsyncReplier<::routeguide::Feature>& replier);
  virtual void GetFeature(
      const ::routeguide::Point& request,
      ::grpc_cb::ServerAsyncReplier<::routeguide::Feature> replier_copy);

  virtual ::grpc_cb::Status ListFeatures(
      ::grpc_cb::ServerContext* context,
      const ::routeguide::Rectangle* request,
      ::grpc_cb::ServerWriter< ::routeguide::Feature>* writer);

  virtual ::grpc_cb::Status RecordRoute(
      ::grpc_cb::ServerContext* context,
      ::grpc_cb::ServerReader< ::routeguide::Point>* reader,
      ::routeguide::RouteSummary* response);

  virtual ::grpc_cb::Status RouteChat(
      ::grpc_cb::ServerContext* context,
      ::grpc_cb::ServerReaderWriter< ::routeguide::RouteNote, ::routeguide::RouteNote>* stream);

 private:
  virtual const ::google::protobuf::ServiceDescriptor& GetDescriptor()
      const GRPC_OVERRIDE {
    return GetServiceDescriptor();
  }
};

}  // namespace RouteGuide

}  // namespace routeguide

#endif  // GRPC_CB_route_5fguide_2eproto__INCLUDED
