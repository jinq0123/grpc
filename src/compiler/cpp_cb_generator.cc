/*
 *
 * Copyright 2015, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <map>
#include <sstream>

#include <google/protobuf/stubs/strutil.h>  // for CEscape()

#include "src/compiler/cpp_cb_generator.h"
#include "src/compiler/cpp_generator_helpers.h"
#include "src/compiler/config.h"

namespace grpc_cpp_cb_generator {
namespace {

template <class T>
grpc::string as_string(T x) {
  std::ostringstream out;
  out << x;
  return out.str();
}

bool NoStreaming(const grpc::protobuf::MethodDescriptor *method) {
  return !method->client_streaming() && !method->server_streaming();
}

bool ClientOnlyStreaming(const grpc::protobuf::MethodDescriptor *method) {
  return method->client_streaming() && !method->server_streaming();
}

bool ServerOnlyStreaming(const grpc::protobuf::MethodDescriptor *method) {
  return !method->client_streaming() && method->server_streaming();
}

bool BidiStreaming(const grpc::protobuf::MethodDescriptor *method) {
  return method->client_streaming() && method->server_streaming();
}

grpc::string FilenameIdentifier(const grpc::string &filename) {
  grpc::string result;
  for (unsigned i = 0; i < filename.size(); i++) {
    char c = filename[i];
    if (isalnum(c)) {
      result.push_back(c);
    } else {
      static char hex[] = "0123456789abcdef";
      result.push_back('_');
      result.push_back(hex[(c >> 4) & 0xf]);
      result.push_back(hex[c & 0xf]);
    }
  }
  return result;
}
}  // namespace

grpc::string GetHeaderPrologue(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    vars["filename"] = file->name();
    vars["filename_identifier"] = FilenameIdentifier(file->name());
    vars["filename_base"] = grpc_generator::StripProto(file->name());

    printer.Print(vars, "// Generated by the gRPC protobuf plugin.\n");
    printer.Print(vars, "// If you make any local change, they will be lost.\n");
    printer.Print(vars, "// source: $filename$\n");
    printer.Print(vars, "#ifndef GRPC_CB_$filename_identifier$__INCLUDED\n");
    printer.Print(vars, "#define GRPC_CB_$filename_identifier$__INCLUDED\n");
    printer.Print(vars, "\n");
  }
  return output;
}

grpc::string GetHeaderIncludes(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    vars["filename"] = file->name();
    vars["filename_base"] = grpc_generator::StripProto(file->name());

    printer.Print(vars,
      "#include <grpc_cb/channel_sptr.h>\n"
      "#include <grpc_cb/error_callback.h>  // for ErrorCallback\n"
      "#include <grpc_cb/service_stub.h>\n"
      "#include <grpc_cb/support/status.h>\n"
      "\n"
      "#include \"$filename_base$.pb.h\"\n"
      "\n");
    printer.Print(
      "namespace google {\n"
      "namespace protobuf {\n"
      "class ServiceDescriptor;\n"
      "// class MethodDescriptor;\n"
      "}  // namespace protobuf\n"
      "}  // namespace google\n"
      "\n");
    printer.Print(
      "namespace grpc_cb {\n"
      "class RpcService;\n"
      "}  // namespace grpc_cb\n"
      "\n");

    if (!file->package().empty()) {
      std::vector<grpc::string> parts =
          grpc_generator::tokenize(file->package(), ".");

      for (auto part = parts.begin(); part != parts.end(); part++) {
        vars["part"] = *part;
        printer.Print(vars, "namespace $part$ {\n");
      }
      printer.Print("\n");
    }  // if
  }  // output
  return output;
}

void PrintHeaderClientMethodPublic(
    grpc::protobuf::io::Printer *printer,
    const grpc::protobuf::MethodDescriptor *method,
    std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);

  if (NoStreaming(method)) {
      printer->Print(*vars,
          "inline ::grpc_cb::Status $Method$(const $Request$& request) {\n"
          "  $Response$ response;\n"
          "  return $Method$(request, &response);  // Ignore response.\n"
          "}\n"
          "::grpc_cb::Status $Method$(const $Request$& request, $Response$* response);\n"
          "\n"
          "typedef std::function<void (const $Response$& response)> $Method$Callback;\n"
          "inline void Async$Method$(const $Request$& request) {\n"
          "  return Async$Method$(request, &IgnoreResponse<$Response$>);\n"
          "}\n"
          "inline void Async$Method$(const $Request$& request, const $Method$Callback& cb) {\n"
          "  return Async$Method$(request, cb, error_callback_);  // Use default error callback.\n"
          "}\n"
          "void Async$Method$(const $Request$& request, const $Method$Callback& cb, const ::grpc_cb::ErrorCallback& err_cb);\n");
  } else if (ClientOnlyStreaming(method)) {
      printer->Print(
          *vars,
          "std::unique_ptr< ::grpc_cb::ClientWriter< $Request$>>"
          " $Method$("
          "::grpc_cb::ClientContext* context, $Response$* response) {\n");
      printer->Indent();
      printer->Print(*vars,
                     "return std::unique_ptr< ::grpc_cb::ClientWriter< $Request$>>"
                     "($Method$Raw(context, response));\n");
      printer->Outdent();
      printer->Print("}\n");
      printer->Print(*vars,
                     "std::unique_ptr< ::grpc_cb::ClientAsyncWriter< $Request$>>"
                     " Async$Method$(::grpc_cb::ClientContext* context, "
                     "$Response$* response, "
                     "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
      printer->Indent();
      printer->Print(
          *vars,
          "return std::unique_ptr< ::grpc_cb::ClientAsyncWriter< $Request$>>("
          "Async$Method$Raw(context, response, cq, tag));\n");
      printer->Outdent();
      printer->Print("}\n");
  } else if (ServerOnlyStreaming(method)) {
      printer->Print(
          *vars,
          "std::unique_ptr< ::grpc_cb::ClientReader< $Response$>>"
          " $Method$(::grpc_cb::ClientContext* context, const $Request$& request)"
          " {\n");
      printer->Indent();
      printer->Print(
          *vars,
          "return std::unique_ptr< ::grpc_cb::ClientReader< $Response$>>"
          "($Method$Raw(context, request));\n");
      printer->Outdent();
      printer->Print("}\n");
      printer->Print(
          *vars,
          "std::unique_ptr< ::grpc_cb::ClientAsyncReader< $Response$>> "
          "Async$Method$("
          "::grpc_cb::ClientContext* context, const $Request$& request, "
          "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
      printer->Indent();
      printer->Print(
          *vars,
          "return std::unique_ptr< ::grpc_cb::ClientAsyncReader< $Response$>>("
          "Async$Method$Raw(context, request, cq, tag));\n");
      printer->Outdent();
      printer->Print("}\n");
  } else if (BidiStreaming(method)) {
      printer->Print(
          *vars,
          "std::unique_ptr< ::grpc_cb::ClientReaderWriter< $Request$, $Response$>>"
          " $Method$(::grpc_cb::ClientContext* context) {\n");
      printer->Indent();
      printer->Print(*vars,
                     "return std::unique_ptr< "
                     "::grpc_cb::ClientReaderWriter< $Request$, $Response$>>("
                     "$Method$Raw(context));\n");
      printer->Outdent();
      printer->Print("}\n");
      printer->Print(*vars,
                     "std::unique_ptr<  ::grpc_cb::ClientAsyncReaderWriter< "
                     "$Request$, $Response$>> "
                     "Async$Method$(::grpc_cb::ClientContext* context, "
                     "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
      printer->Indent();
      printer->Print(*vars,
                     "return std::unique_ptr< "
                     "::grpc_cb::ClientAsyncReaderWriter< $Request$, $Response$>>("
                     "Async$Method$Raw(context, cq, tag));\n");
      printer->Outdent();
      printer->Print("}\n");
  }
}

void PrintHeaderClientMethodPrivate(
    grpc::protobuf::io::Printer *printer,
    const grpc::protobuf::MethodDescriptor *method,
    std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);

  if (NoStreaming(method)) {
  } else if (ClientOnlyStreaming(method)) {
      printer->Print(*vars,
                     "::grpc_cb::ClientWriter< $Request$>* $Method$Raw("
                     "::grpc_cb::ClientContext* context, $Response$* response) "
                     "GRPC_OVERRIDE;\n");
      printer->Print(
          *vars,
          "::grpc_cb::ClientAsyncWriter< $Request$>* Async$Method$Raw("
          "::grpc_cb::ClientContext* context, $Response$* response, "
          "::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;\n");
  } else if (ServerOnlyStreaming(method)) {
      printer->Print(*vars,
                     "::grpc_cb::ClientReader< $Response$>* $Method$Raw("
                     "::grpc_cb::ClientContext* context, const $Request$& request)"
                     " GRPC_OVERRIDE;\n");
      printer->Print(
          *vars,
          "::grpc_cb::ClientAsyncReader< $Response$>* Async$Method$Raw("
          "::grpc_cb::ClientContext* context, const $Request$& request, "
          "::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;\n");
  } else if (BidiStreaming(method)) {
      printer->Print(
          *vars,
          "::grpc_cb::ClientReaderWriter< $Request$, $Response$>* "
          "$Method$Raw(::grpc_cb::ClientContext* context) GRPC_OVERRIDE;\n");
      printer->Print(
          *vars,
          "::grpc_cb::ClientAsyncReaderWriter< $Request$, $Response$>* "
          "Async$Method$Raw(::grpc_cb::ClientContext* context, "
          "::grpc_cb::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;\n");
  }
}

void PrintHeaderClientMethodData(grpc::protobuf::io::Printer *printer,
                                 const grpc::protobuf::MethodDescriptor *method,
                                 std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  printer->Print(*vars, "// const ::grpc_cb::RpcMethod rpcmethod_$Method$_;\n");
}

void PrintHeaderServerMethodSync(grpc::protobuf::io::Printer *printer,
                                 const grpc::protobuf::MethodDescriptor *method,
                                 std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);
  if (NoStreaming(method)) {
    printer->Print(*vars,
                   "virtual ::grpc_cb::Status $Method$("
                   "const $Request$& request, "
                   "$Response$* response);\n");
  } else if (ClientOnlyStreaming(method)) {
    printer->Print(*vars,
                   "virtual ::grpc_cb::Status $Method$("
                   "::grpc_cb::ServerContext* context, "
                   "::grpc_cb::ServerReader< $Request$>* reader, "
                   "$Response$* response);\n");
  } else if (ServerOnlyStreaming(method)) {
    printer->Print(*vars,
                   "virtual ::grpc_cb::Status $Method$("
                   "::grpc_cb::ServerContext* context, const $Request$* request, "
                   "::grpc_cb::ServerWriter< $Response$>* writer);\n");
  } else if (BidiStreaming(method)) {
    printer->Print(
        *vars,
        "virtual ::grpc_cb::Status $Method$("
        "::grpc_cb::ServerContext* context, "
        "::grpc_cb::ServerReaderWriter< $Response$, $Request$>* stream);"
        "\n");
  }
}

void PrintHeaderServerMethodAsync(
    grpc::protobuf::io::Printer *printer,
    const grpc::protobuf::MethodDescriptor *method,
    std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);
  if (NoStreaming(method)) {
    printer->Print(
        *vars,
        "void Request$Method$("
        "::grpc_cb::ServerContext* context, $Request$* request, "
        "::grpc_cb::ServerAsyncResponseWriter< $Response$>* response, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag);\n");
  } else if (ClientOnlyStreaming(method)) {
    printer->Print(
        *vars,
        "void Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "::grpc_cb::ServerAsyncReader< $Response$, $Request$>* reader, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag);\n");
  } else if (ServerOnlyStreaming(method)) {
    printer->Print(
        *vars,
        "void Request$Method$("
        "::grpc_cb::ServerContext* context, $Request$* request, "
        "::grpc_cb::ServerAsyncWriter< $Response$>* writer, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag);\n");
  } else if (BidiStreaming(method)) {
    printer->Print(
        *vars,
        "void Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "::grpc_cb::ServerAsyncReaderWriter< $Response$, $Request$>* stream, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag);\n");
  }
}

void PrintHeaderService(grpc::protobuf::io::Printer *printer,
                        const grpc::protobuf::ServiceDescriptor *service,
                        std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Service"] = service->name();

  printer->Print(*vars,
      "namespace $Service$ {\n\n");

  printer->Print(
      "const ::google::protobuf::ServiceDescriptor& GetServiceDescriptor();\n\n");

  // Client side
  printer->Print(
      "class Stub : public ::grpc_cb::ServiceStub {\n"
      " public:\n");
  printer->Indent();
  printer->Print("Stub(const ::grpc_cb::ChannelSptr& channel);\n");
  printer->Print("\n");
  for (int i = 0; i < service->method_count(); ++i) {
    PrintHeaderClientMethodPublic(printer, service->method(i), vars);
  }
  printer->Outdent();
  printer->Print("\n private:\n");
  printer->Indent();
  for (int i = 0; i < service->method_count(); ++i) {
    PrintHeaderClientMethodPrivate(printer, service->method(i), vars);
  }
  for (int i = 0; i < service->method_count(); ++i) {
    PrintHeaderClientMethodData(printer, service->method(i), vars);
  }
  printer->Outdent();
  printer->Print("};\n");

  printer->Print("\n");
  printer->Print(
      "std::unique_ptr<Stub> NewStub(const ::grpc_cb::ChannelSptr& channel);\n");
  printer->Print("\n");

  // Server side - Synchronous
  printer->Print(
      "class Service {\n"
      " public:\n");
  printer->Indent();
  printer->Print("Service();\n");
  printer->Print("virtual ~Service();\n");
  for (int i = 0; i < service->method_count(); ++i) {
    PrintHeaderServerMethodSync(printer, service->method(i), vars);
  }
  printer->Print("// ::grpc_cb::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;\n");
  printer->Outdent();
  printer->Print(
      " private:\n"
      "  // std::unique_ptr< ::grpc_cb::RpcService> service_;\n");
  printer->Print("};\n");
  printer->Print(*vars,
      "\n}  // namespace $Service$\n");
}

grpc::string GetHeaderServices(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    if (!params.services_namespace.empty()) {
      vars["services_namespace"] = params.services_namespace;
      printer.Print(vars, "\nnamespace $services_namespace$ {\n\n");
    }

    for (int i = 0; i < file->service_count(); ++i) {
      PrintHeaderService(&printer, file->service(i), &vars);
      printer.Print("\n");
    }

    if (!params.services_namespace.empty()) {
      printer.Print(vars, "}  // namespace $services_namespace$\n\n");
    }
  }
  return output;
}

grpc::string GetHeaderEpilogue(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    vars["filename"] = file->name();
    vars["filename_identifier"] = FilenameIdentifier(file->name());

    if (!file->package().empty()) {
      std::vector<grpc::string> parts =
          grpc_generator::tokenize(file->package(), ".");

      for (auto part = parts.rbegin(); part != parts.rend(); part++) {
        vars["part"] = *part;
        printer.Print(vars, "}  // namespace $part$\n");
      }
      printer.Print(vars, "\n");
    }

    printer.Print(vars, "#endif  // GRPC_CB_$filename_identifier$__INCLUDED\n");
  }
  return output;
}

grpc::string GetSourcePrologue(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    vars["filename"] = file->name();
    vars["filename_base"] = grpc_generator::StripProto(file->name());

    printer.Print(vars, "// Generated by the gRPC protobuf plugin.\n");
    printer.Print(vars,
                  "// If you make any local change, they will be lost.\n");
    printer.Print(vars, "// source: $filename$\n\n");
    printer.Print(vars, "#include \"$filename_base$.grpc_cb.pb.h\"\n");
    printer.Print(vars, "\n");
  }
  return output;
}

grpc::string GetSourceIncludes(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &param) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;

    printer.Print("#include <google/protobuf/descriptor.h>\n");
    printer.Print("#include <google/protobuf/stubs/once.h>\n");
    printer.Print("\n");
    printer.Print("#include <grpc_cb/channel.h>\n");
    printer.Print("#include <grpc_cb/completion_queue.h>\n");
    printer.Print("#include <grpc_cb/impl/call.h>\n");
    printer.Print("\n");

    if (!file->package().empty()) {
      std::vector<grpc::string> parts =
          grpc_generator::tokenize(file->package(), ".");

      for (auto part = parts.begin(); part != parts.end(); part++) {
        vars["part"] = *part;
        printer.Print(vars, "namespace $part$ {\n");
      }
    }

    printer.Print(vars, "\n");
  }
  return output;
}

// Return the name of the AssignDescriptors() function for a given file.
grpc::string AssignDescriptorsName(const grpc::string& filename) {
  return "AssignDesc_" + FilenameIdentifier(filename);
}

// Do message classes in this file have descriptor and reflection methods?
inline bool HasDescriptorMethods(const grpc::protobuf::FileDescriptor *file) {
  // TODO: Use GRPC_CUSTOM_FILEOPTIONS.
  return file->options().optimize_for() != google::protobuf::FileOptions::LITE_RUNTIME;
}

grpc::string GetSourceDescriptors(const grpc::protobuf::FileDescriptor *file,
                                  const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;
    vars["filename"] = file->name();
    vars["AssignDescriptorsName"] = AssignDescriptorsName(file->name());

    printer.Print(vars,
      "namespace {\n"
      "\n");

    for (int i = 0; i < file->service_count(); i++) {
      vars["Service"] = file->service(i)->name();
      printer.Print(vars,
        "const ::google::protobuf::ServiceDescriptor* service_descriptor_$Service$ = nullptr;\n");
    }
    printer.Print("\n");

    if (HasDescriptorMethods(file)) {
      printer.Print(vars,
        "void $AssignDescriptorsName$() {\n"
        "  // Get the file's descriptor from the pool.\n"
        "  const ::google::protobuf::FileDescriptor* file =\n"
        "    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(\n"
        "      \"$filename$\");\n");
      // Note that this GOOGLE_CHECK is necessary to prevent a warning about \"file\"
      // being unused when compiling an empty .proto file.
      printer.Print(
        "  GOOGLE_CHECK(file != NULL);\n");

      // Go through all the stuff defined in this file and generated code to
      // assign the global descriptor pointers based on the file descriptor.
      for (int i = 0; i < file->service_count(); i++) {
        vars["Service"] = file->service(i)->name();
        vars["Idx"] = as_string(i);
        printer.Print(vars,
          "  service_descriptor_$Service$ = file->service($Idx$);\n");
      }

      printer.Print(vars,
        "}  // $AssignDescriptorsName$()\n"
        "\n");

      // AssignDescriptorsOnce():  The first time it is called, calls
      // AssignDescriptors().  All later times, waits for the first call to
      // complete and then returns.
      printer.Print(vars,
        "GOOGLE_PROTOBUF_DECLARE_ONCE(grpc_cb_AssignDescriptors_once_);\n"
        "inline void AssignDescriptorsOnce() {\n"
        "  ::google::protobuf::GoogleOnceInit(\n"
        "    &grpc_cb_AssignDescriptors_once_,\n"
        "    &$AssignDescriptorsName$);\n"
        "}\n"
        "\n");

      printer.Print(
        "}  // namespace\n"
        "\n");
    }  // if (HasDescriptorMethods())
  }
  return output;
}

void PrintSourceClientMethod(grpc::protobuf::io::Printer *printer,
                             const grpc::protobuf::MethodDescriptor *method,
                             std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);
  if (NoStreaming(method)) {
    printer->Print(*vars,
        "::grpc_cb::Status Stub::$Method$(\n"
        "    const $Request$& request,\n"
        "    $Response$* response) {\n"
        "  assert(response);\n"
        "  ::grpc_cb::CompletionQueue cq;\n"
        "  ::grpc_cb::CallUptr call(channel_->CreateCall(method_names[$Idx$], cq.cq()));\n"
        "  void* tag = call.get();\n"
        "  grpc_cb::Status status = call->StartBatch(request, tag);\n"
        "  if (!status.ok()) return status;\n"
        "  cq.Pluck(tag);\n"
      "  return call->GetResponse(response);\n"
        "}\n"
        "\n");
    printer->Print(*vars,
        "void Stub::Async$Method$(\n"
        "    const $Request$& request,\n"
        "    const SayHelloCallback& cb,\n"
        "    const ::grpc_cb::ErrorCallback& err_cb) {\n"
        "  assert(cb && err_cb && cq_);\n"
        "  ::grpc_cb::CallUptr call_uptr(\n"
        "      channel_->CreateCall(method_names[$Idx$], cq_->cq()));\n"
        "  ::grpc_cb::Call* call = call_uptr.get();\n"
        "  ::grpc_cb::CompletionQueueTag* tag =\n"
        "      NewCompletionQueueTag(std::move(call_uptr), cb, err_cb);\n"
        "  grpc_cb::Status status = call->StartBatch(request, tag);\n"
        "  if (!status.ok()) {\n"
        "    EraseCompletionCb(tag);\n"
        "    err_cb(status);\n"
        "  }\n"
        "}\n"
        "\n");
  } else if (ClientOnlyStreaming(method)) {
    printer->Print(*vars,
                   "::grpc_cb::ClientWriter< $Request$>* "
                   "Stub::$Method$Raw("
                   "::grpc_cb::ClientContext* context, $Response$* response) {\n");
    printer->Print(*vars,
                   "  return new ::grpc_cb::ClientWriter< $Request$>("
                   "channel_.get(), "
                   "rpcmethod_$Method$_, "
                   "context, response);\n"
                   "}\n\n");
    printer->Print(*vars,
                   "::grpc_cb::ClientAsyncWriter< $Request$>* "
                   "Stub::Async$Method$Raw("
                   "::grpc_cb::ClientContext* context, $Response$* response, "
                   "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
    printer->Print(*vars,
                   "  return new ::grpc_cb::ClientAsyncWriter< $Request$>("
                   "channel_.get(), cq, "
                   "rpcmethod_$Method$_, "
                   "context, response, tag);\n"
                   "}\n\n");
  } else if (ServerOnlyStreaming(method)) {
    printer->Print(
        *vars,
        "::grpc_cb::ClientReader< $Response$>* "
        "Stub::$Method$Raw("
        "::grpc_cb::ClientContext* context, const $Request$& request) {\n");
    printer->Print(*vars,
                   "  return new ::grpc_cb::ClientReader< $Response$>("
                   "channel_.get(), "
                   "rpcmethod_$Method$_, "
                   "context, request);\n"
                   "}\n\n");
    printer->Print(*vars,
                   "::grpc_cb::ClientAsyncReader< $Response$>* "
                   "Stub::Async$Method$Raw("
                   "::grpc_cb::ClientContext* context, const $Request$& request, "
                   "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
    printer->Print(*vars,
                   "  return new ::grpc_cb::ClientAsyncReader< $Response$>("
                   "channel_.get(), cq, "
                   "rpcmethod_$Method$_, "
                   "context, request, tag);\n"
                   "}\n\n");
  } else if (BidiStreaming(method)) {
    printer->Print(
        *vars,
        "::grpc_cb::ClientReaderWriter< $Request$, $Response$>* "
        "Stub::$Method$Raw(::grpc_cb::ClientContext* context) {\n");
    printer->Print(*vars,
                   "  return new ::grpc_cb::ClientReaderWriter< "
                   "$Request$, $Response$>("
                   "channel_.get(), "
                   "rpcmethod_$Method$_, "
                   "context);\n"
                   "}\n\n");
    printer->Print(
        *vars,
        "::grpc_cb::ClientAsyncReaderWriter< $Request$, $Response$>* "
        "Stub::Async$Method$Raw(::grpc_cb::ClientContext* context, "
        "::grpc_cb::CompletionQueue* cq, void* tag) {\n");
    printer->Print(*vars,
                   "  return new "
                   "::grpc_cb::ClientAsyncReaderWriter< $Request$, $Response$>("
                   "channel_.get(), cq, "
                   "rpcmethod_$Method$_, "
                   "context, tag);\n"
                   "}\n\n");
  }
}

void PrintSourceServerMethod(grpc::protobuf::io::Printer *printer,
                             const grpc::protobuf::MethodDescriptor *method,
                             std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);
  if (NoStreaming(method)) {
    printer->Print(*vars,
                   "::grpc_cb::Status Service::$Method$("
                   "const $Request$& request, $Response$* response) {\n");
    printer->Print("  (void) request;\n");
    printer->Print("  (void) response;\n");
    printer->Print(
        "  return ::grpc_cb::Status::UNIMPLEMENTED;\n");
    printer->Print("}\n\n");
  } else if (ClientOnlyStreaming(method)) {
    printer->Print(*vars,
                   "::grpc_cb::Status Service::$Method$("
                   "::grpc_cb::ServerContext* context, "
                   "::grpc_cb::ServerReader< $Request$>* reader, "
                   "$Response$* response) {\n");
    printer->Print("  (void) context;\n");
    printer->Print("  (void) reader;\n");
    printer->Print("  (void) response;\n");
    printer->Print(
        "  return ::grpc_cb::Status::UNIMPLEMENTED;\n");
    printer->Print("}\n\n");
  } else if (ServerOnlyStreaming(method)) {
    printer->Print(*vars,
                   "::grpc_cb::Status Service::$Method$("
                   "::grpc_cb::ServerContext* context, "
                   "const $Request$* request, "
                   "::grpc_cb::ServerWriter< $Response$>* writer) {\n");
    printer->Print("  (void) context;\n");
    printer->Print("  (void) request;\n");
    printer->Print("  (void) writer;\n");
    printer->Print(
        "  return ::grpc_cb::Status::UNIMPLEMENTED;\n");
    printer->Print("}\n\n");
  } else if (BidiStreaming(method)) {
    printer->Print(*vars,
                   "::grpc_cb::Status Service::$Method$("
                   "::grpc_cb::ServerContext* context, "
                   "::grpc_cb::ServerReaderWriter< $Response$, $Request$>* "
                   "stream) {\n");
    printer->Print("  (void) context;\n");
    printer->Print("  (void) stream;\n");
    printer->Print(
        "  return ::grpc_cb::Status::UNIMPLEMENTED;\n");
    printer->Print("}\n\n");
  }
}

void PrintSourceServerAsyncMethod(
    grpc::protobuf::io::Printer *printer,
    const grpc::protobuf::MethodDescriptor *method,
    std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Method"] = method->name();
  (*vars)["Request"] =
      grpc_cpp_generator::ClassName(method->input_type(), true);
  (*vars)["Response"] =
      grpc_cpp_generator::ClassName(method->output_type(), true);
  if (NoStreaming(method)) {
    printer->Print(
        *vars,
        "void AsyncService::Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "$Request$* request, "
        "::grpc_cb::ServerAsyncResponseWriter< $Response$>* response, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag) {\n");
    printer->Print(*vars,
                   "  AsynchronousService::RequestAsyncUnary($Idx$, context, "
                   "request, response, new_call_cq, notification_cq, tag);\n");
    printer->Print("}\n\n");
  } else if (ClientOnlyStreaming(method)) {
    printer->Print(
        *vars,
        "void AsyncService::Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "::grpc_cb::ServerAsyncReader< $Response$, $Request$>* reader, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag) {\n");
    printer->Print(*vars,
                   "  AsynchronousService::RequestClientStreaming($Idx$, "
                   "context, reader, new_call_cq, notification_cq, tag);\n");
    printer->Print("}\n\n");
  } else if (ServerOnlyStreaming(method)) {
    printer->Print(
        *vars,
        "void AsyncService::Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "$Request$* request, "
        "::grpc_cb::ServerAsyncWriter< $Response$>* writer, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag) {\n");
    printer->Print(
        *vars,
        "  AsynchronousService::RequestServerStreaming($Idx$, "
        "context, request, writer, new_call_cq, notification_cq, tag);\n");
    printer->Print("}\n\n");
  } else if (BidiStreaming(method)) {
    printer->Print(
        *vars,
        "void AsyncService::Request$Method$("
        "::grpc_cb::ServerContext* context, "
        "::grpc_cb::ServerAsyncReaderWriter< $Response$, $Request$>* stream, "
        "::grpc_cb::CompletionQueue* new_call_cq, "
        "::grpc_cb::ServerCompletionQueue* notification_cq, void *tag) {\n");
    printer->Print(*vars,
                   "  AsynchronousService::RequestBidiStreaming($Idx$, "
                   "context, stream, new_call_cq, notification_cq, tag);\n");
    printer->Print("}\n\n");
  }
}

void PrintSourceService(grpc::protobuf::io::Printer *printer,
                        const grpc::protobuf::ServiceDescriptor *service,
                        std::map<grpc::string, grpc::string> *vars) {
  (*vars)["Service"] = service->name();
  printer->Print(*vars,
                 "namespace $Service$ {\n"
                 "\n");
  printer->Print(*vars,
                 "static const char* method_names[] = {\n");
  for (int i = 0; i < service->method_count(); ++i) {
    (*vars)["Method"] = service->method(i)->name();
    printer->Print(*vars, "  \"/$Package$$Service$/$Method$\",\n");
  }
  printer->Print(*vars, "};\n\n");

  printer->Print(*vars,
                 "const ::google::protobuf::ServiceDescriptor& GetServiceDescriptor() {\n"
                 "  AssignDescriptorsOnce();\n"
                 "  assert(service_descriptor_$Service$);\n"
                 "  return *service_descriptor_$Service$;\n"
                 "}\n\n");

  printer->Print(*vars,
                 "std::unique_ptr< Stub> NewStub("
                 "const ::grpc_cb::ChannelSptr& channel) {\n"
                 "  std::unique_ptr< Stub> stub(new Stub(channel));\n"
                 "  return stub;\n"
                 "}\n\n");
  printer->Print(*vars,
                 "Stub::Stub(const ::grpc_cb::ChannelSptr& channel)\n");
  printer->Indent();
  printer->Print(": ::grpc_cb::ServiceStub(channel)");
  for (int i = 0; i < service->method_count(); ++i) {
    const grpc::protobuf::MethodDescriptor *method = service->method(i);
    (*vars)["Method"] = method->name();
    (*vars)["Idx"] = as_string(i);
    if (NoStreaming(method)) {
      (*vars)["StreamingType"] = "NORMAL_RPC";
    } else if (ClientOnlyStreaming(method)) {
      (*vars)["StreamingType"] = "CLIENT_STREAMING";
    } else if (ServerOnlyStreaming(method)) {
      (*vars)["StreamingType"] = "SERVER_STREAMING";
    } else {
      (*vars)["StreamingType"] = "BIDI_STREAMING";
    }
    printer->Print(*vars,
                   "\n  // , rpcmethod_$Method$_("
                   "method_names[$Idx$], "
                   "::grpc_cb::RpcMethod::$StreamingType$, "
                   "channel"
                   ")\n");
  }
  printer->Print("{}\n\n");
  printer->Outdent();

  for (int i = 0; i < service->method_count(); ++i) {
    (*vars)["Idx"] = as_string(i);
    PrintSourceClientMethod(printer, service->method(i), vars);
  }

  (*vars)["MethodCount"] = as_string(service->method_count());
  printer->Print(*vars,
                 "// AsyncService::AsyncService() : "
                 "::grpc_cb::AsynchronousService("
                 "method_names, $MethodCount$) "
                 "{}\n\n");

  printer->Print(*vars,
                 "Service::Service() {\n"
                 "}\n\n");
  printer->Print(*vars,
                 "Service::~Service() {\n"
                 "}\n\n");
  for (int i = 0; i < service->method_count(); ++i) {
    (*vars)["Idx"] = as_string(i);
    PrintSourceServerMethod(printer, service->method(i), vars);
    // PrintSourceServerAsyncMethod(printer, service->method(i), vars);
  }
  printer->Print(*vars,
                 "}  // namespace $Service$\n\n");
}

grpc::string GetSourceServices(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string output;
  {
    // Scope the output stream so it closes and finalizes output to the string.
    grpc::protobuf::io::StringOutputStream output_stream(&output);
    grpc::protobuf::io::Printer printer(&output_stream, '$');
    std::map<grpc::string, grpc::string> vars;
    // Package string is empty or ends with a dot. It is used to fully qualify
    // method names.
    vars["Package"] = file->package();
    if (!file->package().empty()) {
      vars["Package"].append(".");
    }

    for (int i = 0; i < file->service_count(); ++i) {
      PrintSourceService(&printer, file->service(i), &vars);
    }
  }
  return output;
}

grpc::string GetSourceEpilogue(const grpc::protobuf::FileDescriptor *file,
                               const Parameters &params) {
  grpc::string temp;

  if (!file->package().empty()) {
    std::vector<grpc::string> parts =
        grpc_generator::tokenize(file->package(), ".");

    for (auto part = parts.begin(); part != parts.end(); part++) {
      temp.append("}  // namespace ");
      temp.append(*part);
      temp.append("\n");
    }
    temp.append("\n");
  }

  return temp;
}

}  // namespace grpc_cpp_cb_generator
